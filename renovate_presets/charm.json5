{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    ":disableRateLimiting",
    ":noUnscheduledUpdates",
    // Avoid conflicts with custom `commitMessagePrefix`
    ":semanticCommitsDisabled"
  ],
  "schedule": ["after 1am and before 3am every weekday"],
  "lockFileMaintenance": {
    "enabled": true,
    "schedule": ["after 1am and before 3am every weekday"]
  },
  "timezone": "Etc/UTC",
  "enabledManagers": ["poetry", "github-actions", "regex"],
  "packageRules": [
    // Later rules override earlier rules
    {
      "matchManagers": ["poetry"],
      "rangeStrategy": "bump",
      "groupName": "Python dependencies"
    },
    {
      "matchManagers": ["poetry"],
      "matchDepTypes": ["charm-libs"],
      "rangeStrategy": "in-range-only",
      "groupName": "Python dependencies"
    },
    // Disable Python updates
    // (Python version should be updated when Ubuntu version is updated)
    {
      "matchManagers": ["poetry"],
      // Renovate uses "dependencies" instead of "main" for top-level dependency group
      "matchDepTypes": ["dependencies"],
      "matchPackageNames": ["python"],
      "enabled": false
    },
    {
      "matchManagers": ["github-actions"],
      "groupName": "GitHub actions"
    },
    // Group data-platform-workflows Python package & workflow updates into the same PR
    {
      "matchManagers": ["poetry"],
      "matchPackageNames": ["canonical/data-platform-workflows"],
      // Workaround for https://github.com/renovatebot/renovate/discussions/23628
      "versioning": "semver",
      "groupName": "data-platform-workflows",
      // Workaround: data-platform-workflows Python packages use git tags instead of pyproject.toml
      // for versioning. Therefore, Renovate will always think an update is a major version update.
      "separateMajorMinor": false
    },
    {
      "matchManagers": ["github-actions"],
      "matchPackageNames": ["canonical/data-platform-workflows"],
      "groupName": "data-platform-workflows",
      // Workaround: data-platform-workflows Python packages use git tags instead of pyproject.toml
      // for versioning. Therefore, Renovate will always think an update is a major version update.
      // Since we want packages to be updated alongside workflows (actions), we must disable
      // separate major PRs for workflows as well.
      "separateMajorMinor": false
    },
    {
      "matchManagers": ["regex"],
      "matchPackageNames": ["juju/juju"],
      "groupName": "Juju agents"
    },
    // Disable major & minor version updates for Juju agent (they should be handled manually)
    {
      "matchManagers": ["regex"],
      "matchPackageNames": ["juju/juju"],
      "matchUpdateTypes": ["major", "minor"],
      "enabled": false
    },
    // Get latest microk8s release
    {
      "matchDepNames": ["Microk8s"],
      "matchPackageNames": ["canonical/microk8s"],
      "extractVersion": "^v(?<version>.*)$",
      "groupName": "Microk8s"
    }
  ],
  "regexManagers": [
    {
      "fileMatch": ["^\\.github/workflows/[^/]+\\.ya?ml$"],
      "matchStrings": ["(?<currentValue>[0-9.]+) +# renovate: juju-agent-pin-minor"],
      "depNameTemplate": "juju/juju",
      "extractVersionTemplate": "^juju-(?<version>.*)$",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "semver"
    },
    // Update microk8s to latest release
    {
      "customType": "regex",
      "fileMatch": ["^(workflow-templates|\\.github/workflows)/[^/]+\\.ya?ml$"],
      "matchStrings": [
        "microk8s-snap-channel: (?<currentValue>.*?)-strict/stable +# renovate: latest microk8s"
      ],
      "depNameTemplate": "Microk8s",
      "packageNameTemplate": "canonical/microk8s",
      "datasourceTemplate": "github-releases",
      "versioningTemplate": "loose",
      "extractVersionTemplate": "Microk8s release"
    }
  ]
}
